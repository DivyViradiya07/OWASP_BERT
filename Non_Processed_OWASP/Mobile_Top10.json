[
    {
        "id": "M1",
        "name": "Improper Credential Usage",
        "threat_agents": {
          "type": "Application Specific",
          "description": "Threat agents include automated attackers using public or custom tools to exploit hardcoded or misused credentials."
        },
        "attack_vectors": {
          "exploitability": "EASY",
          "description": "Adversaries can exploit hardcoded credentials or misuse improperly validated or stored credentials to bypass authentication and gain unauthorized access."
        },
        "security_weakness": {
          "prevalence": "COMMON",
          "detectability": "EASY",
          "description": "Poor credential management practices such as hardcoding credentials or mishandling them are common and easily detectable through static or dynamic analysis."
        },
        "technical_impacts": {
          "severity": "SEVERE",
          "description": "Unauthorized access to sensitive app functions or backend systems may occur, leading to data breaches, privacy violations, or fraud."
        },
        "business_impacts": {
          "severity": "SEVERE",
          "description": "Consequences include reputation damage, information theft, fraudulent activity, and loss of user trust due to unauthorized access."
        },
        "vulnerability_indicators": [
          "Hardcoded credentials in source code or config files",
          "Credentials transmitted without encryption or over insecure channels",
          "Insecure storage of credentials on device",
          "Weak or easily bypassed user authentication"
        ],
        "preventive_measures": [
          "Avoid hardcoding credentials in the app or config files",
          "Encrypt all credential transmissions",
          "Avoid storing credentials on the device; use secure, revocable tokens",
          "Use strong authentication protocols and mechanisms",
          "Regularly rotate and revoke credentials like API keys or tokens"
        ],
        "example_attack_scenarios": [
          {
            "scenario": "Hardcoded Credentials",
            "description": "An attacker finds hardcoded credentials in the app and uses them to access restricted functionality."
          },
          {
            "scenario": "Insecure Credential Transmission",
            "description": "An attacker intercepts credentials sent over an unencrypted channel and impersonates a user."
          },
          {
            "scenario": "Insecure Credential Storage",
            "description": "An attacker extracts stored credentials from a stolen device and uses them to access a user account."
          }
        ]
      },
      {
        "id": "M2",
        "name": "Inadequate Supply Chain Security",
        "threat_agents": {
          "type": "Application Specific",
          "description": "Attackers may exploit vulnerabilities introduced during app development or from insecure third-party components. This includes malicious code injection, misuse of signing keys, or exploitation of vulnerable libraries and SDKs."
        },
        "attack_vectors": {
          "exploitability": "AVERAGE",
          "description": "Supply chain vulnerabilities can be exploited via malicious code injection, compromise of app signing keys, or flaws in third-party libraries used in the mobile app."
        },
        "security_weakness": {
          "prevalence": "COMMON",
          "detectability": "DIFFICULT",
          "description": "Weak security practices in coding, code review, testing, and component validation contribute to supply chain risks. Issues may remain undetected during normal app testing."
        },
        "technical_impacts": {
          "severity": "SEVERE",
          "description": "Successful exploitation can result in data breaches, malware infection, unauthorized access, or full system compromise."
        },
        "business_impacts": {
          "severity": "SEVERE",
          "description": "Impacts include financial loss, reputational damage, regulatory penalties, and disruption of services or supply chains."
        },
        "vulnerability_indicators": [
          "Use of outdated or unvetted third-party components",
          "Inadequate code review or testing processes",
          "Insecure app signing or distribution mechanisms",
          "Absence of runtime integrity validation or tamper detection",
          "Lack of security awareness or policies for suppliers and developers"
        ],
        "preventive_measures": [
          "Implement secure coding practices and thorough code reviews",
          "Perform rigorous testing and validation of all components",
          "Use trusted and verified third-party libraries or SDKs",
          "Secure app signing keys and distribution channels",
          "Monitor app behavior post-release for signs of tampering or compromise",
          "Enforce policies and training for developers and supply chain partners"
        ],
        "example_attack_scenarios": [
          {
            "scenario": "Malware Injection",
            "description": "An attacker modifies the app during development by injecting malware, signs it with a legitimate certificate, and distributes it. The malicious app steals user data, leading to fraud and reputational harm."
          },
          {
            "scenario": "Compromised Third-Party Library",
            "description": "A vulnerable third-party SDK used by the app is exploited by attackers to introduce spyware into all apps using it. Sensitive user data is exfiltrated silently."
          },
          {
            "scenario": "Stolen Signing Key",
            "description": "An attacker gains access to the developer's signing keys and uses them to distribute a modified version of the app, which contains a hidden backdoor for remote access."
          }
        ]
      },
      {
        "id": "M3",
        "title": "Insecure Authentication/Authorization",
        "threat_agents": "Application Specific",
        "attack_vectors": {
          "exploitability": "EASY",
          "description": "Attackers exploit authentication and authorization flaws by bypassing the mobile app interface and directly interacting with backend services, or by logging in as valid users and accessing unauthorized functionality. These attacks often utilize mobile malware or botnets."
        },
        "security_weakness": {
          "prevalence": "COMMON",
          "detectability": "AVERAGE",
          "description": "Weaknesses include poor client-side authorization checks, local/offline authentication routines, short or weak credentials, and reliance on client-provided roles or tokens. Authorization logic implemented on the device instead of the backend exacerbates the risk."
        },
        "technical_impact": {
          "impact": "SEVERE",
          "description": "Poor authentication and authorization controls can result in privilege escalation, unauthorized access, lack of audit trails, and exposure of sensitive functionality and data. Authentication failures often cascade into authorization failures."
        },
        "business_impact": {
          "impact": "SEVERE",
          "description": "Organizations may suffer from data breaches, loss of customer trust, fraud, unauthorized access to systems, and potential legal consequences due to non-compliance with data protection regulations."
        },
        "am_i_vulnerable": {
          "authentication": [
            "Anonymous backend API access without session tokens.",
            "Storage of passwords/shared secrets on device.",
            "Weak password policies (e.g., short PINs).",
            "Over-reliance on FaceID/TouchID without proper fallback checks."
          ],
          "authorization": [
            "Presence of IDOR vulnerabilities.",
            "Lack of backend validation for hidden endpoints.",
            "Backend trusting client-supplied role or permission data."
          ]
        },
        "how_to_prevent": {
          "authentication": [
            "Use server-side authentication whenever possible.",
            "Avoid storing passwords locally or using 'Remember Me' features that store secrets.",
            "Encrypt locally stored data with keys derived securely from login credentials.",
            "Avoid weak credentials like 4-digit PINs.",
            "Use revocable, device-specific authentication tokens."
          ],
          "authorization": [
            "Always verify roles and permissions server-side.",
            "Never trust roles/permissions supplied by the client.",
            "Implement integrity checks to detect unauthorized binary modification.",
            "Treat all client-side authorization logic as bypassable."
          ],
          "general": [
            "Avoid spoofable identifiers (device ID, location) for authentication.",
            "Do not enable persistent auth by default â€” make it opt-in.",
            "Use biometric unlocks only to access protected secrets, not as sole auth."
          ]
        },
        "example_scenarios": [
          {
            "title": "Hidden Service Requests",
            "description": "Backend does not validate the user's identity, allowing anonymous service requests to execute sensitive operations."
          },
          {
            "title": "Interface Reliance",
            "description": "Developers assume only authorized users can see certain UI functions and skip backend checks. Attackers exploit this to execute admin tasks."
          },
          {
            "title": "Usability Requirements",
            "description": "4-digit PINs used for convenience are vulnerable to brute-force and rainbow table attacks if leaked."
          },
          {
            "title": "Insecure Direct Object Reference",
            "description": "Actor ID in API requests is not validated against the access token, allowing users to access other users' data."
          },
          {
            "title": "Transmission of LDAP Roles",
            "description": "Backend accepts client-supplied LDAP group info and fails to independently validate it, leading to privilege escalation."
          }
        ]
      },
      {
        "id": "M4",
        "title": "Insufficient Input/Output Validation",
        "threat_agents": "Application Specific",
        "attack_vectors": {
          "exploitability": "DIFFICULT",
          "description": "Insufficient input/output validation exposes the application to critical attack vectors, including SQL injection, XSS, command injection, and path traversal. These can result in unauthorized access, data manipulation, code execution, and full backend compromise."
        },
        "security_weakness": {
          "prevalence": "COMMON",
          "detectability": "EASY",
          "description": "Vulnerabilities arise from improper or absent validation of user input and output. This includes failure to check and sanitize input, neglecting contextual validation, and not verifying data integrity. Common coding errors, insufficient testing, and lack of awareness contribute to these flaws."
        },
        "technical_impact": {
          "impact": "SEVERE",
          "description": "Exploitation can lead to arbitrary code execution, unauthorized access, data breaches, system compromise, application crashes, and data corruption. It undermines the applicationâ€™s stability, integrity, and confidentiality."
        },
        "business_impact": {
          "impact": "SEVERE",
          "description": "Organizations may suffer financial loss, legal penalties, regulatory non-compliance, and damage to brand reputation. Customer trust may erode following system outages or sensitive data leaks."
        },
        "am_i_vulnerable": {
          "vulnerabilities": [
            "Lack of input validation allows SQL injection, command injection, or XSS.",
            "Inadequate output sanitization leads to XSS and data manipulation.",
            "Neglecting context-specific validation (e.g., path traversal, file inclusion).",
            "Absence of data integrity checks allows tampering or corruption.",
            "Failure to follow secure coding practices (e.g., use of parameterized queries)."
          ]
        },
        "how_to_prevent": {
          "input_validation": [
            "Enforce strict input validation rules and reject unexpected or malformed data.",
            "Apply length and type restrictions on all inputs."
          ],
          "output_sanitization": [
            "Use output encoding for data presented to users or transmitted to external systems.",
            "Sanitize all outputs, especially user-generated content."
          ],
          "contextual_validation": [
            "Implement context-specific validation depending on the data type and processing location (e.g., file uploads, SQL queries)."
          ],
          "data_integrity": [
            "Use data integrity checks to detect unauthorized modifications or corrupt inputs."
          ],
          "secure_coding": [
            "Use secure coding patterns such as parameterized queries and prepared statements.",
            "Avoid dynamic code execution with user input."
          ],
          "testing": [
            "Perform regular code reviews, static analysis, and penetration testing to identify validation flaws."
          ]
        },
        "example_scenarios": [
          {
            "title": "Remote Code Execution via Malicious Input",
            "description": "An attacker sends specially crafted input to a mobile application lacking proper validation. The application mishandles the input and executes arbitrary code, leading to unauthorized access."
          },
          {
            "title": "Injection Attacks via Insufficient Output Validation",
            "description": "A user injects malicious scripts into an appâ€™s output due to lack of sanitization. This leads to cross-site scripting (XSS) and unauthorized data access."
          },
          {
            "title": "Remote Code Execution via Malformed Output",
            "description": "An attacker submits malformed data that the app uses to generate output. Due to lack of validation, this leads to code execution and device compromise."
          }
        ]
      },
      {
        "id": "M5",
        "title": "Insecure Communication",
        "threat_agents": "Application Specific",
        "description": "Insecure Communication refers to failures in protecting data in transit between a mobile device and a remote endpoint. Despite using cryptographic protocols like SSL/TLS, many mobile applications suffer from misconfigurations, deprecated protocols, or lack of proper validation. Adversaries can exploit these weaknesses to intercept or manipulate data, particularly over compromised networks, rogue routers, or malware-infected devices. This leads to exposure of sensitive information including credentials, session tokens, and personal data.",
        "attack_vectors": "Mobile apps frequently transmit data over public networks. If this data is sent in plaintext or over improperly configured secure channels, attackers can intercept it via methods like man-in-the-middle (MITM) attacks. Typical flaws include use of outdated encryption protocols, acceptance of invalid SSL certificates, and inconsistencies in applying TLS across workflows.",
        "security_weakness": {
          "prevalence": "COMMON",
          "detectability": "AVERAGE",
          "description": "Despite widespread adoption of SSL/TLS, improper implementations such as failing to validate server certificates, using weak cipher suites, or permitting unencrypted communication are common. These flaws may not be immediately obvious without deeper inspection of the mobile appâ€™s network behavior and configuration."
        },
        "technical_impacts": {
          "impact": "SEVERE",
          "description": "Exploitation of insecure communication can lead to data interception, session hijacking, credential theft, and full account compromise. Attackers can manipulate or observe sensitive data in transit, undermining confidentiality and integrity."
        },
        "business_impacts": {
          "impact": "MODERATE",
          "description": "Business consequences include identity theft, user fraud, and reputational damage. Legal and compliance penalties may arise from violating data protection regulations due to intercepted or leaked sensitive information."
        },
        "am_i_vulnerable": [
          "Use of plaintext communication over the internet or carrier networks.",
          "Transmission of sensitive data via insecure channels like SMS or HTTP.",
          "Use of SSL/TLS without certificate validation or with deprecated protocols.",
          "Transmission of session identifiers or credentials over insecure networks.",
          "Improper SSL implementation that accepts any certificate or uses weak cipher suites."
        ],
        "how_to_prevent": {
          "general_best_practices": [
            "Always assume the network is insecure and apply TLS (SSL) to all communication channels.",
            "Use strong cipher suites and trusted CA-signed certificates.",
            "Disallow all invalid, expired, or self-signed certificates unless during development in a controlled environment.",
            "Perform certificate pinning to prevent MITM via rogue certificates.",
            "Enforce SSL chain verification and alert users on invalid certificates.",
            "Avoid mixed-mode content or partially encrypted sessions.",
            "Apply additional encryption for highly sensitive data even when using SSL.",
            "Analyze traffic to detect any unencrypted transmission during security assessments."
          ],
          "ios_specific_best_practices": [
            "Use Secure Transport APIs and ensure NSStreamSocketSecurityLevelTLSv1 or higher.",
            "Disable setAllowsAnyHTTPSCertificate in production.",
            "Implement certificate pinning using NSURL authentication challenge handlers."
          ],
          "android_specific_best_practices": [
            "Remove or disable hostname verifiers that trust all certificates (e.g., AllowAllHostnameVerifier).",
            "Properly implement checkServerTrusted in custom SSLSocketFactory.",
            "Do not override onReceivedSslError to ignore certificate warnings."
          ]
        },
        "example_attack_scenarios": [
          {
            "scenario": "Lack of Certificate Inspection",
            "description": "The mobile app accepts any SSL certificate without verification, enabling MITM attacks via rogue certificates, compromising authentication and session integrity."
          },
          {
            "scenario": "Weak Handshake Negotiation",
            "description": "The app negotiates a weak cipher suite during TLS handshake, allowing adversaries to decrypt traffic and access sensitive data in transit."
          },
          {
            "scenario": "Privacy Information Leakage",
            "description": "Personally identifiable information (PII) is sent over HTTP, allowing attackers to capture data during transmission."
          },
          {
            "scenario": "Credential Information Leakage",
            "description": "User credentials are sent via plaintext HTTP or SMS, making them susceptible to eavesdropping."
          },
          {
            "scenario": "Two-Factor Authentication Bypass",
            "description": "Session tokens are transmitted insecurely, enabling attackers to hijack sessions and bypass two-factor authentication controls."
          }
        ]
      },
      {
        "id": "M6",
        "name": "Inadequate Privacy Controls",
        "threat_agents": "Application Specific",
        "description": "Inadequate privacy controls refer to the insufficient protection of personally identifiable information (PII), such as names, addresses, credit card information, email addresses, and sensitive personal details. Attackers exploit such data for fraud, identity theft, blackmail, or reputational harm. PII can be leaked, manipulated, or destroyed, violating confidentiality, integrity, or availability.",
        "attack_vectors": {
          "exploitability": "AVERAGE",
          "details": "Accessing PII typically requires breaching other layers of security, such as eavesdropping on network communication, accessing logs, clipboard, or the file system via malware, or extracting data from device backups. Since PII is just data, it can be manipulated or exfiltrated through multiple vectors, including insecure communication and insufficient access controls."
        },
        "security_weakness": {
          "prevalence": "COMMON",
          "detectability": "EASY",
          "details": "Many applications process more PII than required, increasing risk without business justification. Vulnerabilities arise when developers carelessly handle PII, storing or transmitting it via insecure channels or without appropriate safeguards."
        },
        "technical_impacts": {
          "impact": "LOW",
          "details": "While privacy violations may not directly affect the app's core functionality, compromised PII (especially if including credentials) can impact user traceability and system integrity. Manipulated user data might affect backend systems if they lack sanitization."
        },
        "business_impacts": {
          "impact": "SEVERE",
          "details": "Privacy violations can lead to legal consequences under data protection laws (e.g., GDPR, CCPA), financial damages from lawsuits, reputational harm, and loss of user trust. Additionally, stolen PII can enable social engineering attacks against both users and the service provider."
        },
        "am_i_vulnerable": "If the app processes any form of PII (which is likely), it may be vulnerable if PII is exposed through insecure storage, transmission, or insufficient access controls. PII is often collected unnecessarily or stored longer than needed, increasing the attack surface.",
        "how_to_prevent": {
          "strategies": [
            "Minimize PII collection to what is strictly necessary for functionality.",
            "Replace or reduce PII granularity where possible (e.g., coarse location vs. precise).",
            "Anonymize or pseudonymize data using hashing or noise.",
            "Enforce data retention policies by deleting PII after expiration.",
            "Require explicit user consent for optional PII usage.",
            "Secure all PII during storage and transmission with proper authentication, authorization, and encryption.",
            "Implement defense in depth for highly sensitive PII (e.g., encrypt with device TPM).",
            "Avoid logging or displaying PII in error messages and crash reports.",
            "Use static/dynamic analysis tools to detect privacy flaws like URL parameter leakage or clipboard misuse.",
            "Employ threat modeling to assess and mitigate privacy-related attack paths."
          ]
        },
        "example_attack_scenarios": [
          {
            "title": "Scenario #1: Inadequate sanitization of logs and error messages",
            "description": "Crash reports or logs include sensitive data like usernames or account details, potentially exposing them to analytics providers, users, or attackers with access to logs."
          },
          {
            "title": "Scenario #2: Using PII in URL query parameters",
            "description": "PII passed in URLs is logged in web server logs, visible in browser history or analytics tools, violating confidentiality."
          },
          {
            "title": "Scenario #3: Exclusion of personal data in backups/not setting hasFragileUserData",
            "description": "An app allows sensitive data to be included in device backups or persists user data after uninstallation, making it accessible to malicious apps with the same package name."
          }
        ],
        "related_issues": [
          "M1: Improper Credential Handling",
          "M2: Insecure Data Storage",
          "M3: Insecure Authentication",
          "M4: Insecure Authorization",
          "M5: Insecure Communication",
          "M8: Code Tampering",
          "M9: Reverse Engineering"
        ]
      },
      {
        "id": "M7",
        "name": "Insufficient Binary Protection",
        "description": "Insufficient Binary Protection occurs when app binaries are vulnerable to reverse engineering or tampering, exposing sensitive secrets or enabling malicious modification of app behavior.",
        "threat_agents": [
          {
            "type": "Application Specific",
            "description": "Attackers motivated by theft of secrets, valuable code, business logic, AI models, or preparing backend attacks. Also attackers seeking to bypass paywalls, remove license checks, or distribute malicious app copies."
          }
        ],
        "attack_vectors": [
          {
            "type": "Reverse engineering",
            "description": "Decompiling app binaries to extract secrets, algorithms, or vulnerabilities."
          },
          {
            "type": "Code tampering",
            "description": "Manipulating binaries to bypass security controls, enable unauthorized features, or embed malicious code."
          }
        ],
        "exploitability": "EASY",
        "security_weakness": {
          "prevalence": "COMMON",
          "detectability": "EASY",
          "description": "All apps are vulnerable, especially those with sensitive hardcoded data or high popularity. Protection measures can only slow down but not prevent attacks."
        },
        "technical_impact": {
          "impact": "MODERATE",
          "description": "Leaked secrets require rapid replacement; manipulation can alter app behavior or destabilize backend systems."
        },
        "business_impact": {
          "impact": "MODERATE",
          "description": "Financial losses from API misuse, revenue impact from removed license checks, intellectual property theft, and reputational damage from malicious redistribution."
        },
        "vulnerability_assessment": {
          "description": "All apps are vulnerable; stronger protections recommended for apps with sensitive data or popularity. Use reverse engineering tools (MobSF, otool, apktool, Ghidra) to evaluate binary exposure."
        },
        "prevention": [
          {
            "measure": "Obfuscation",
            "description": "Make binaries difficult to reverse engineer with commercial or free obfuscation tools."
          },
          {
            "measure": "Native compilation and virtual machines",
            "description": "Compile critical code natively or run in nested VMs to increase reverse engineering complexity."
          },
          {
            "measure": "Backend enforcement",
            "description": "Enforce critical security checks on backend systems, not only in the app."
          },
          {
            "measure": "Integrity checks",
            "description": "Detect binary tampering and make the app unusable or report unauthorized copies."
          },
          {
            "measure": "Monitoring and takedown",
            "description": "Detect and remove tampered app versions from app stores using internal or specialized external services."
          }
        ],
        "example_attack_scenarios": [
          {
            "id": "1",
            "title": "Hardcoded API keys",
            "description": "API keys embedded in the binary can be extracted and misused, leading to large financial costs or service disruptions."
          },
          {
            "id": "2",
            "title": "Disabling payment and license checks",
            "description": "Attackers modify the app binary to bypass license verification, gaining full access without payment."
          },
          {
            "id": "3",
            "title": "Hardcoded AI models",
            "description": "Valuable AI models embedded in the binary can be extracted and sold to competitors, exposing proprietary technology."
          }
        ]
      },
      {
        "id": "M8",
        "name": "Security Misconfiguration",
        "description": "Security misconfiguration in mobile apps refers to the improper configuration of security settings, permissions, and controls that can lead to vulnerabilities and unauthorized access.",
        "threat_agents": [
          {
            "type": "Application Specific",
            "description": "Attackers aiming to gain unauthorized access to sensitive data or perform malicious actions. This includes attackers with physical device access or malicious apps exploiting misconfigurations."
          }
        ],
        "attack_vectors": [
          {
            "type": "Insecure default settings",
            "description": "Mobile apps shipped with weak security settings or unnecessary permissions enabled."
          },
          {
            "type": "Improper access controls",
            "description": "Misconfigured controls allowing unauthorized data access or privileged actions."
          },
          {
            "type": "Weak encryption or hashing",
            "description": "Use of weak or improperly implemented cryptographic algorithms."
          },
          {
            "type": "Lack of secure communication",
            "description": "Failure to enforce SSL/TLS leading to eavesdropping or man-in-the-middle attacks."
          },
          {
            "type": "Unprotected storage",
            "description": "Storing sensitive data in plain text or weakly encrypted formats."
          },
          {
            "type": "Insecure file permissions",
            "description": "Files stored with world-readable or writable permissions."
          },
          {
            "type": "Misconfigured session management",
            "description": "Improper session controls enabling session hijacking or impersonation."
          }
        ],
        "exploitability": "DIFFICULT",
        "security_weakness": {
          "prevalence": "COMMON",
          "detectability": "EASY",
          "description": "Common due to development time constraints, lack of awareness, or human error. Easily detected by code reviews, security testing, or automated scanners."
        },
        "technical_impact": {
          "impact": "SEVERE",
          "description": "Includes unauthorized access to sensitive data, account hijacking, data breaches, and backend system compromise."
        },
        "business_impact": {
          "impact": "SEVERE",
          "description": "Leads to financial loss, legal penalties, data theft, downtime, and reputational damage."
        },
        "vulnerability_assessment": {
          "description": "Apps are vulnerable if they do not follow security best practices such as reviewing default settings, enforcing secure communication, applying patches, and protecting sensitive data storage. Examples include exposed file provider paths, exported internal activities, and excessive permissions."
        },
        "prevention": [
          {
            "measure": "Secure default configurations",
            "description": "Ensure defaults do not expose sensitive info or grant unnecessary permissions."
          },
          {
            "measure": "Avoid default credentials",
            "description": "Do not use hardcoded default usernames or passwords."
          },
          {
            "measure": "Restrict file permissions",
            "description": "Avoid world-readable/writable files; apply least privilege."
          },
          {
            "measure": "Apply least privilege principle",
            "description": "Request only necessary permissions."
          },
          {
            "measure": "Secure network configuration",
            "description": "Disallow cleartext traffic and use certificate pinning."
          },
          {
            "measure": "Disable debugging in production",
            "description": "Prevent exposure of debug info in release builds."
          },
          {
            "measure": "Disable Android backup mode",
            "description": "Prevent app data from being included in device backups."
          },
          {
            "measure": "Limit exported components",
            "description": "Export only necessary activities, content providers, and services."
          }
        ],
        "example_attack_scenarios": [
          {
            "id": "1",
            "title": "Insecure default settings",
            "description": "App shipped with default insecure protocols, credentials, and enabled debugging, allowing unauthorized data access."
          },
          {
            "id": "2",
            "title": "Insecure file provider path settings",
            "description": "Exported file content provider exposes internal app resources to other apps."
          },
          {
            "id": "3",
            "title": "Overly permissive storage permissions",
            "description": "App stores preferences or data files with world-readable permissions, exposing data to other apps."
          },
          {
            "id": "4",
            "title": "Exported activity",
            "description": "Internal activities exported unnecessarily, increasing attack surface."
          },
          {
            "id": "5",
            "title": "Unnecessary permissions",
            "description": "App requests excessive permissions unrelated to core functionality, risking data misuse or leaks."
          }
        ]
      },
      {
        "id": "M9",
        "title": "Insecure Data Storage",
        "description": "Insecure data storage in a mobile application occurs when sensitive information is stored without adequate protection, leading to potential unauthorized access, data breaches, and data tampering.",
        "threat_agents": [
          "Skilled adversaries targeting mobile apps for valuable data",
          "Malicious insiders abusing privileges",
          "State-sponsored actors conducting cyber espionage",
          "Cybercriminals seeking financial gain through data theft or ransom",
          "Script kiddies using pre-built tools",
          "Data brokers exploiting insecure storage",
          "Competitors and industrial spies",
          "Hacktivists with ideological motives"
        ],
        "attack_vectors": {
          "description": "Unauthorized access via device file system (physical or remote), exploiting weak/no encryption, intercepting data transmissions, malware on device, rooted/jailbroken devices, and social engineering.",
          "exploitability": "EASY"
        },
        "security_weakness": {
          "description": "Weak or absent encryption, storing sensitive data in easily accessible locations, insufficient access controls and authentication, lack of secure transmission protocols.",
          "prevalence": "COMMON",
          "detectability": "AVERAGE"
        },
        "technical_impact": {
          "severity": "SEVERE",
          "details": [
            "Data breaches exposing sensitive user information",
            "Compromised user accounts via stolen credentials",
            "Data tampering leading to integrity issues",
            "Unauthorized access to app resources such as keys and config files",
            "Damage to app functionality and backend systems",
            "Compliance violations with legal and regulatory frameworks"
          ]
        },
        "business_impact": {
          "severity": "SEVERE",
          "details": [
            "Reputational damage and loss of customer trust",
            "Legal penalties and regulatory fines",
            "Financial costs due to breach response and lost business",
            "Competitive disadvantage from weakened customer confidence"
          ]
        },
        "vulnerability_indicators": [
          "Lack of access controls on stored data",
          "Unencrypted or weakly encrypted sensitive data",
          "Exposure of sensitive data via logs or debugging features",
          "Poor session management risking data leakage",
          "Insufficient input validation and data sanitization",
          "Misconfigured cloud storage permissions",
          "Use of vulnerable third-party libraries",
          "Improper handling of data sharing features"
        ],
        "prevention": [
          "Use strong encryption for data at rest and in transit",
          "Secure data transmission with HTTPS/SSL/TLS",
          "Store data using platform-specific secure storage (e.g., iOS Keychain, Android Keystore)",
          "Implement strict access controls and user authentication",
          "Validate and sanitize all user inputs",
          "Apply secure session management techniques",
          "Keep all dependencies and libraries updated",
          "Monitor and stay updated on security threats and best practices"
        ],
        "example_attack_scenarios": [
          "Passwords stored in plaintext accessible on device",
          "Sensitive PII stored without encryption locally",
          "Authentication tokens cached insecurely and extracted",
          "Sensitive information logged without protection",
          "Cloud storage with overly permissive access settings",
          "Temporary files containing sensitive data not properly deleted"
        ]
      },
      {
        "id": "M10",
        "title": "Insufficient Cryptography",
        "description": "Insufficient cryptography occurs when a mobile application uses weak or improperly implemented cryptographic algorithms, key management, or protocols, leading to compromised confidentiality, integrity, and authenticity of sensitive information.",
        "threat_agents": [
          "Attackers targeting cryptographic algorithms or implementations to decrypt sensitive data",
          "Malicious insiders manipulating cryptographic processes or leaking keys",
          "State-sponsored actors performing cryptanalysis for intelligence",
          "Cybercriminals exploiting weak encryption to steal data or commit fraud",
          "Attackers leveraging vulnerabilities in cryptographic protocols or libraries"
        ],
        "attack_vectors": {
          "description": "Exploitation of weaknesses in cryptographic mechanisms via cryptographic attacks, brute force, side-channel attacks, or exploiting flawed implementations or poor key management.",
          "exploitability": "AVERAGE"
        },
        "security_weakness": {
          "description": "Use of weak or outdated encryption algorithms, inadequate key lengths, poor key management, insecure random number generation, flawed cryptographic protocol implementation, or vulnerable cryptographic libraries.",
          "prevalence": "COMMON",
          "detectability": "AVERAGE"
        },
        "technical_impact": {
          "severity": "SEVERE",
          "details": [
            "Unauthorized retrieval and decryption of sensitive information",
            "Compromised confidentiality and integrity of data",
            "Ability for attackers to forge or tamper with data"
          ]
        },
        "business_impact": {
          "severity": "SEVERE",
          "details": [
            "Data breaches exposing sensitive customer information leading to legal liabilities and reputational damage",
            "Loss of intellectual property through decryption of proprietary data",
            "Financial losses due to fraud and breach remediation costs",
            "Regulatory non-compliance and associated penalties"
          ]
        },
        "vulnerability_indicators": [
          "Usage of weak or deprecated encryption algorithms",
          "Encryption keys with insufficient length or easily guessable",
          "Insecure storage or transmission of encryption keys",
          "Incorrect implementation of encryption or decryption processes",
          "Lack of secure transport protocols (e.g., HTTPS)",
          "Insufficient validation or authentication in cryptographic processes",
          "Absence of salting for hashed data",
          "Use of insecure or outdated hash functions"
        ],
        "prevention": [
          "Use strong, modern encryption algorithms like AES, RSA, or ECC",
          "Ensure sufficient key lengths as per industry standards",
          "Implement secure key management using key vaults or hardware security modules",
          "Follow best practices and use trusted cryptographic libraries",
          "Securely store encryption keys, avoiding plaintext or accessible locations",
          "Use secure transport layers such as HTTPS with proper certificate validation",
          "Validate and authenticate entities involved in cryptographic operations",
          "Employ strong hash functions (e.g., SHA-256, bcrypt) with proper salting",
          "Use Key Derivation Functions (e.g., PBKDF2, bcrypt, scrypt) for password hashing",
          "Keep cryptographic components up to date with security patches",
          "Conduct regular cryptographic vulnerability assessments and code reviews"
        ],
        "example_attack_scenarios": [
          {
            "title": "Man-in-the-Middle (MitM) Attacks",
            "description": "An attacker intercepts communication and exploits weak cryptography to decrypt, modify, and re-encrypt data without detection."
          },
          {
            "title": "Brute-Force Attacks",
            "description": "Attackers try multiple keys until the correct decryption key is found, facilitated by weak encryption or short keys."
          },
          {
            "title": "Cryptographic Downgrade Attacks",
            "description": "Attackers force an application to use weaker encryption protocols supported as fallback options."
          },
          {
            "title": "Key Management Vulnerabilities",
            "description": "Poor storage or handling of keys allows attackers to access encryption keys and decrypt data."
          },
          {
            "title": "Cryptographic Implementation Flaws",
            "description": "Flaws in implementation such as incorrect library usage or insecure random number generation allow attackers to bypass encryption."
          }
        ]
      }                                                            
]